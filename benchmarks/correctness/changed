%3 = alloca [10 x %struct.Test], align 16 => arr 
==> %4 = alloca [10 x %struct.Test_1], align 16
==> %5 = alloca [10 x %struct.Test_2], align 16 // be careful of alignment 

Test : a => Test_1, 0 <index in new struct>, Type , Alignment of new struct 
       b => Test_2, 0 
       c => Test_2, 1
       d => Test_1, 1

%3 => %4 (Test_1) & %5 (Test_2) => align 4 

-- Write (original) -- 
%11 = getelementptr inbounds [10 x %struct.Test], ptr %3, i64 0, i64 %10 => Address of arr[i] 
%12 = getelementptr inbounds %struct.Test, ptr %11, i32 0, [i32 0]       => grab the address of arr[i].a
store i32 10, ptr %12, align 8                                           => arr[i].a = 10;

Track %3, came to %11.
Track %11, check which fields are being used. 


---Change to --------
%11 = getelementptr inbounds [10 x %struct.Test], <ptr %4>, i64 0, [i64 %10] => Put correct offset!!  arr_1[i]
%12 = getelementptr inbounds %struct.Test, ptr %11, i32 0, [i32 0]      
store i32 10, ptr %12, align 8                                           





%14 = getelementptr inbounds %struct.Test, ptr %3, i32 0, i32 1   (index) 
store i32 5, ptr %14, align 8
==> 
%14 = getelementptr inbounds %struct.Test, <ptr %5>, i32 0, <i32 0> (index) 
store i32 5, ptr %14, align 8